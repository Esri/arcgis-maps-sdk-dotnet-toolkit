<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask TaskName="Esri_ArcGISRuntime_Toolkit_Android_UpdateInternalResourceIdAssignmentsTask" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <ResourceFilePath Required="True" />
      <ResourceFileUpdateSucceeded ParameterType="System.Boolean" Output="True" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        try
        {
          // Check whether the auto-generated Resource.Designer.cs file exists
          if (File.Exists(ResourceFilePath))
          {
            Log.LogMessage("Found auto-generated resource file: " + ResourceFilePath, MessageImportance.Low);
            var builder = new StringBuilder();
            var assemblyRetrievalLineInserted = false;
            var replacementLine = "\t\t\ttoolkitAssembly?.GetType(\"{0}\"){1}?.GetField(\"{2}\")?.SetValue(null, {3});";
            var resourceClassName = "Esri.ArcGISRuntime.Toolkit.Resource";
            
            // Read each line of resource file
            foreach (var line in File.ReadLines(ResourceFilePath))
            {
              // Check if current line is an assignment of a Toolkit resource ID
              if (line.TrimStart().StartsWith("global::" + resourceClassName + "."))
              {
                // Add code to access Toolkit assembly if it hasn't already been added
                if (!assemblyRetrievalLineInserted)
                {
                  builder.AppendLine("\t\t\tvar toolkitAssembly = typeof(Esri.ArcGISRuntime.Toolkit.UI.LoopMode).Assembly;");
                  assemblyRetrievalLineInserted = true;    
                }
                
                // Parse the assignment statement into the relevant parts
                var assignmentParts = line.Trim().Split('=');
                var fullyQualifiedFieldName = assignmentParts[0].Trim();
                var fieldNameParts = fullyQualifiedFieldName.Split('.');
                var fieldName = fieldNameParts[fieldNameParts.Length - 1];
                var className = fullyQualifiedFieldName.Replace("global::", string.Empty).Replace("." + fieldName, string.Empty);
                var nestedClasses = className.Replace(resourceClassName + ".", string.Empty).Split('.');
                var getNestedClassesString = string.Empty;
                foreach (var nestedClass in nestedClasses)
                {
                    getNestedClassesString += "?.GetNestedType(\"" + nestedClass + "\")";
                }
                var targetField = assignmentParts[1].Trim().Replace(";", string.Empty);
                
                // Re-write the assignment statement to set the internal resource ID
                var newLine = String.Format(replacementLine, resourceClassName, getNestedClassesString, fieldName, targetField);
                builder.AppendLine(newLine);
                Log.LogMessage("Replacing line \""+ line + "\" with \"" + newLine + "\"", MessageImportance.Low);
              }
              else
              {
                // The current line is not an assignment of a Toolkit resource ID, so keep it as-is
                Log.LogMessage("Keeping line \"" + line + "\" unchanged", MessageImportance.Low);
                builder.AppendLine(line);
              }    
            }
            
            // Write the updated resource file to disk
            Log.LogMessage("Writing auto-generated Resource file updates to disk", MessageImportance.Low);
            File.WriteAllText(ResourceFilePath, builder.ToString());
            ResourceFileUpdateSucceeded = true;
          }
          else
          {
              Log.LogMessage("Auto-generated file not found at path " + ResourceFilePath, MessageImportance.Low);
              ResourceFileUpdateSucceeded = false;
          }
        }
        catch (Exception ex)
        {
            Log.LogMessage("Error occured: " + ex.Message + "\n" + ex.StackTrace, MessageImportance.Low);
            ResourceFileUpdateSucceeded = false;
        }
      </Code>
    </Task>
  </UsingTask>
  <Target Name="Esri_ArcGISRuntime_Toolkit_UpdateAndroidResourceIdAssignments" AfterTargets="_UpdateAndroidResgen">
    <Esri_ArcGISRuntime_Toolkit_Android_UpdateInternalResourceIdAssignmentsTask ResourceFilePath="$(ProjectDir)$(AndroidResgenFile)">
      <Output PropertyName="AndroidResourceFileUpdateSucceeded" TaskParameter="ResourceFileUpdateSucceeded" />
    </Esri_ArcGISRuntime_Toolkit_Android_UpdateInternalResourceIdAssignmentsTask>
    <Error Condition="!$(AndroidResourceFileUpdateSucceeded)" Text="Failed to update auto-generated Resource class.  Check output of Esri_ArcGISRuntime_Toolkit_UpdateAndroidResourceIdAssignments build target for details." />
  </Target>
</Project>
